{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/Contact-ListItem.module.css","redux/phonebook/phonebook-selectors.js","redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-operations.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.jsx","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","getAllContacts","state","phonebook","items","getFilter","filter","getIsLoading","isLoading","getVisibleContacts","createSelector","contacts","toLowerCaseFilter","toLowerCase","name","includes","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","actions","get","then","data","catch","error","number","post","id","delete","initialState","Contacts","alert","useAlert","useDispatch","useSelector","useState","setState","handleChange","e","prevState","target","value","className","styles","Form","onSubmit","preventDefault","newItem","uuidv4","Number","some","contact","show","operations","Label","Input","type","pattern","title","required","onChange","Button","ContactItem","contactID","find","item","getContactID","List_item","List_button","onClick","ContactList","visibleContacts","useEffect","map","useStyles","createUseStyles","display","marginBottom","width","fontSize","color","cursor","font","marginTop","borderRadius","border","outline","boxShadow","ContactFilter","classes","filterText","Section","styled","section","App","Filter","height","timeout","combineReducers","action","payload","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","template","AlertTemplate","document","getElementById"],"mappings":"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","file":"static/js/main.2d26a2b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__3LeAv\",\"Label\":\"ContactForm_Label__3yFXJ\",\"Input\":\"ContactForm_Input__TZ9Se\",\"Button\":\"ContactForm_Button__3nBzd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List_item\":\"Contact-ListItem_List_item__mIXpk\",\"List_button\":\"Contact-ListItem_List_button__jPigt\"};","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getAllContacts = (state) => state.phonebook.items;\r\nexport const getFilter = (state) => state.phonebook.filter;\r\nexport const getIsLoading = (state) => state.phonebook.isLoading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const toLowerCaseFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(toLowerCaseFilter)\r\n    );\r\n  }\r\n);\r\n\r\nexport const getContactID = (contactID) => (state) =>\r\n  state.phonebook.items.find((item) => item.id === contactID);\r\n\r\n            // eslint-disable-next-line\r\n// export default {\r\n//   getAllContacts,     ///// getContacts,\r\n//   getFilter,\r\n//   getIsLoading,\r\n//   //getError,\r\n//   getVisibleContacts,\r\n//   getContactID       ///// getContact\r\n// };\r\n\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// Create Action для отримання списку контактів\r\nconst fetchContactsRequest = createAction('phonebook/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('phonebook/fetchContactsSuccess');\r\nconst fetchContactsError =   createAction('phonebook/fetchContactsError');\r\n// Create Action для додавання контактів\r\nconst addContactRequest = createAction('phonebook/addContactRequest');\r\nconst addContactSuccess = createAction('phonebook/addContactSuccess');\r\nconst addContactError =   createAction('phonebook/addContactError');\r\n// Create Action для видалення контактів\r\nconst deleteContactRequest = createAction('phonebook/deleteContactRequest',);\r\nconst deleteContactSuccess = createAction('phonebook/deleteContactSuccess',);\r\nconst deleteContactError =   createAction('phonebook/deleteContactError',);\r\n// Create Action для фільтра\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n//export const changeFilter = createAction('phonebook/changeFilter');\r\n\r\n\r\n          // eslint-disable-next-line\r\nexport default {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  \r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  \r\n  changeFilter\r\n};\r\n\r\n\r\n","import axios from 'axios';\r\n// import {\r\n//   fetchContactsRequest,\r\n//   fetchContactsSuccess,\r\n//   fetchContactsError,\r\n\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n  \r\n//   deleteContactRequest,\r\n//   deleteContactSuccess,\r\n//   deleteContactError,\r\n//   } from './phonebook-actions';\r\nimport actions from './phonebook-actions';\r\n  \r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n// Отримання списка контактів \r\nconst getAllContacts = () =>  (dispatch) => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\n// Додавання контактів \r\nconst addContact = ({ name, number }) => (dispatch) => {\r\n  const contacts = { name, number };  \r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contacts)   \r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\n// Видалення контактів \r\nconst deleteContact = id => (dispatch) => {\r\n  dispatch(actions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\n          // eslint-disable-next-line\r\nexport default { getAllContacts, addContact, deleteContact };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import axios from \"axios\";\r\n\r\n// import contactsActions from \"./contactsActions\";\r\n\r\n// axios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\n\r\n// const addContact = (name, number) => (dispatch) => {\r\n//   dispatch(contactsActions.addContactRequest());\r\n\r\n//   axios\r\n//     .post(\"/contacts\", { name, number })\r\n//     .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n//     .catch((error) => dispatch(contactsActions.addContactError(error)));\r\n// };\r\n\r\n\r\n// const fetchContacts = () => (dispatch) => {\r\n//   dispatch(contactsActions.fetchContactsRequest());\r\n\r\n//   axios\r\n//     .get(\"/contacts\")\r\n//     .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n//     .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\r\n// };\r\n\r\n\r\n// const deleteContact = (id) => (dispatch) => {\r\n//   dispatch(contactsActions.deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`/contacts/${id}`)\r\n//     .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\r\n//     .catch((error) => dispatch(contactsActions.deleteContactError(error)));\r\n// };\r\n\r\n// export default { addContact, fetchContacts, deleteContact, };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // const fetchData = () => {\r\n// //   return axios.get(`/`).then((res) => {\r\n// //     console.log(res);\r\n// //     return res;\r\n// //   });\r\n// // };\r\n\r\n// const postContact = ({ name, number }) => {\r\n//   return axios.post(`/contacts`, { name, number }).then(({ data }) => {\r\n//     return data;\r\n//   });\r\n// };\r\n\r\n// const fetchContacts = () => {\r\n//   return axios.get(`/contacts`).then(({ data }) => {\r\n//     return data;\r\n//   });\r\n// };\r\n\r\n// const deleteContact = ({ id }) => {\r\n//   return axios.delete(`/contacts/${id}`).then(() => {\r\n//     return id;\r\n//   });\r\n// };\r\n\r\n// export default {\r\n//   fetchContacts,\r\n//   postContact,\r\n//   deleteContact,\r\n//   // fetchData,\r\n// };","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./ContactForm.module.css\";\r\nimport { useAlert } from \"react-alert\";\r\nimport { getAllContacts } from '../../redux/phonebook/phonebook-selectors';\r\nimport operations from '../../redux/phonebook/phonebook-operations';\r\n\r\n//const INITIAL_STATE = {\r\nconst initialState = {\r\n  id: '',  \r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nconst Contacts = () => {\r\n  const alert = useAlert();\r\n  const dispatch = useDispatch();\r\n \r\n  const contacts = useSelector(getAllContacts);\r\n  //const [state, setState] = useState(INITIAL_STATE);\r\n  const [state, setState] = useState(initialState);\r\n  const { name, number } = state;\r\n\r\n  const handleSaveItem = (item) => dispatch(operations.addContact(item));\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newItem = {\r\n      id: uuidv4(), \r\n      name,\r\n      number: Number(number),\r\n    };\r\n\r\n    if (contacts.some((contact) => contact.name === newItem.name)) {\r\n      alert.show(`${newItem.name} is already in your contacts`);\r\n      return;\r\n    }\r\n\r\n    handleSaveItem(newItem);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n    \r\n    return (\r\n      <form className={styles.Form} onSubmit={handleSubmit}>\r\n        \r\n          <label className={styles.Label}>\r\n            Name\r\n            <input\r\n                className={styles.Input}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                value={name}  // // {this.state.name} -  значення передає в локальний стейт\r\n                onChange={handleChange}\r\n            />\r\n          </label>\r\n        \r\n          <label className={styles.Label}>\r\n            Number\r\n            <input\r\n                className={styles.Input}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                required\r\n                value={number}      // {this.state.number}\r\n                onChange={ handleChange }\r\n            />\r\n          </label>\r\n        \r\n            <button className={styles.Button} type=\"submit\">\r\n              Add contact\r\n            </button>\r\n      </form>\r\n    )\r\n}\r\n\r\nContacts.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contacts;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport operations from \"../../redux/phonebook/phonebook-operations\";\r\nimport { getContactID } from \"../../redux/phonebook/phonebook-selectors\";\r\nimport styles from \"./Contact-ListItem.module.css\";\r\n\r\n\r\nconst ContactItem = ({ contactID }) => {\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const contact = useSelector(getContactID(contactID)); //from redux\r\n  const { id, name, number } = contact;\r\n\r\n  const handleDeleteItem = () => dispatch(operations.deleteContact(id));\r\n\r\n  return (\r\n    <li  className= {styles.List_item} key={id}>         \r\n       {\"• \" + name + \":   \" + number}\r\n      <button className={styles.List_button}\r\n              id={id}\r\n              type=\"button\"\r\n              name=\"delete\"\r\n              onClick={handleDeleteItem}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactItem;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //import { createUseStyles } from \"react-jss\";\r\n \r\n  // const useStyles = createUseStyles({\r\n//   item: {\r\n//     display: \"flex\",\r\n//     alignItems: \"center\",\r\n//     justifyContent: \"center\",\r\n//   },\r\n// });\r\n\r\n  // const classes = useStyles();","\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport ContactItem from \"./ContactListItem\";\r\nimport { getVisibleContacts } from \"../../redux/phonebook/phonebook-selectors\";\r\nimport operations from \"../../redux/phonebook/phonebook-operations\";\r\n\r\n\r\nconst ContactList = () => {\r\n  const dispatch = useDispatch();\r\n \r\n  const visibleContacts = useSelector(getVisibleContacts);               \r\n\r\n  useEffect(() =>\r\n  {\r\n    dispatch(operations.getAllContacts());\r\n    }, [dispatch]                     // () => dispatch(operations.getAllContacts()),  []\r\n  );\r\n\r\n  return (\r\n    <ul >\r\n      {visibleContacts.map( contact => (\r\n        <ContactItem\r\n             key={contact.id}\r\n          contactID={contact.id}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n\r\n// import styled from 'styled-components';\r\n//     import { getVisibleContacts } from '../../redux/phonebook/phonebook-selectors';\r\n// import ContactListItem from './ContactListItem';\r\n// //import phonebookActions from '../../redux/phonebook/phonebook-actions';\r\n// import phonebookOperations from '../../redux/phonebook/phonebook-operations';\r\n// //import phonebookSelectors from '../../redux/phonebook/phonebook-selectors';\r\n\r\n\r\n// // компонента ContactList\r\n// class ContactList extends Component {\r\n// //const ContactsList = ({ contacts, onDelete }) => (\r\n  \r\n//   componentDidUpdate(prevProp, prevState) {\r\n//     const prevContacts = prevProp.contacts;\r\n//     const currentContacts = this.props.contacts;\r\n\r\n//     if (prevContacts !== currentContacts) {\r\n//       localStorage.setItem('contacts', JSON.stringify(currentContacts));\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     const { contacts, onDelete } = this.props;\r\n\r\n//     if (contacts.length < 1) {\r\n//       return null;\r\n//     }\r\n\r\n//     return (\r\n//       <List>\r\n//         {contacts.map(({ id, name, number }) => {\r\n//           return (\r\n//             <ContactListItem\r\n//               key={id}\r\n//               name={name}\r\n//               number={number}\r\n//               onDelete={() => onDelete(id)}\r\n//             />\r\n//           );\r\n//         })}\r\n//       </List>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// const List = styled.ul`\r\n//   width: 500px;\r\n// `;\r\n\r\n// // Аргумент mapStateToProps функции connect для предоставления данных хранилища вашему компоненту\r\n// const mapStateToProps = state => {\r\n//   const { contacts, filter } = state.phonebook;\r\n//   //const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\r\n//   const visibleContacts = useSelector(getVisibleContacts); //from redux\r\n  \r\n\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//     //contacts: phonebookSelectors.visibleContacts,\r\n//   };\r\n// };\r\n\r\n\r\n// // Аргумент mapDispatchToProps может быть либо объектом, либо функцией, которая возвращает либо обычный объект, либо другую функцию\r\n//     // const mapDispatchToProps = {\r\n//     //   onDelete: phonebookOperations.deleteContact,\r\n//     // };\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDelete: id => dispatch(phonebookOperations.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n// //export default connect( null, mapDispatchToProps)(ContactList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n// //class ContactList extends Component {\r\n// const ContactList = ({ contacts, onDelete }) => {\r\n  \r\n//   // componentDidUpdate(prevProp, prevState) {\r\n//   //   const prevContacts = prevProp.contacts;\r\n//   //   const currentContacts = this.props.contacts;\r\n\r\n//   //   if (prevContacts !== currentContacts) {\r\n//   //     localStorage.setItem('contacts', JSON.stringify(currentContacts));\r\n//   //   }\r\n//   // };\r\n\r\n//   //render() \r\n//     // const { contacts, onDelete } = this.props;\r\n\r\n//     // if (contacts.length < 1) {\r\n//     //   return null;\r\n//     // }\r\n\r\n//     return (\r\n//       <List>\r\n//         {contacts.map(({ id, name, number }) => {\r\n//           return (\r\n//             <ContactListItem\r\n//               key={id}\r\n//               name={name}\r\n//               number={number}\r\n//               onDelete={() => onDelete(id)}\r\n//             />\r\n//           );\r\n//         })}\r\n//       </List>\r\n//     )\r\n//   // }\r\n// }\r\n\r\n// const List = styled.ul`\r\n//   width: 500px;\r\n// `;\r\n\r\n// // Аргумент mapStateToProps функции connect для предоставления данных хранилища вашему компоненту\r\n//     // const mapStateToProps = state => {\r\n//     //   const { contacts, filter } = state.phonebook;\r\n//     //   const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\r\n\r\n//     //   return {\r\n//     //     contacts: visibleContacts,\r\n//     //     //contacts: phonebookSelectors.visibleContacts,\r\n//     //   };\r\n//     // };\r\n// // const mapStateToProps = state => ({\r\n// //   contacts: phonebookSelectors.getVisibleContacts(state),\r\n// // });\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport actions from \"../../redux/phonebook/phonebook-actions\";\r\nimport { getFilter } from \"../../redux/phonebook/phonebook-selectors\";\r\n\r\n    import { createUseStyles } from 'react-jss';\r\n\r\n    const useStyles = createUseStyles({\r\n        Label:{\r\n            display: 'inline-block',\r\n            marginBottom: 16,\r\n            width: 200,\r\n            fontSize: 16,\r\n            color: '#171718',\r\n            cursor: 'pointer',\r\n            }, \r\n         \r\n        Input: {\r\n            color: '#171718',\r\n            font: 'inherit',\r\n            fontSize: '0.9rem',\r\n            marginTop: 6,\r\n            borderRadius: 4,\r\n            border: '1px solid #9e9d9d',\r\n            width: 200,\r\n            outline: 0,\r\n            '&:focus': {\r\n                border: '2px solid blue',\r\n                boxShadow: '1px 1px 3px 1px rgba(41, 107, 250, 0.14)',\r\n                },\r\n            }\r\n        });\r\n\r\n\r\nconst ContactFilter = () => {\r\n  const classes = useStyles();\r\n  \r\n  const dispatch = useDispatch();\r\n  \r\n  const filter = useSelector(getFilter);         //from redux\r\n  \r\n  const handleFilter = (filterText) =>\r\n    dispatch(actions.changeFilter(filterText));\r\n\r\n  const handleChange = (e) => {\r\n    const filter = e.target.value;\r\n\r\n    handleFilter(filter);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className = {classes.Label}>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          value={filter}\r\n          name=\"filter\"\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactFilter;","import React from 'react';\nimport styled from 'styled-components'\nimport Spinner from 'react-loader-spinner';\nimport { useSelector } from \"react-redux\";\nimport AddContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport { getIsLoading } from \"./redux/phonebook/phonebook-selectors\";\n\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n  const isLoading = useSelector(getIsLoading);\n\n  return (\n    <>\n      <Section>\n        <h1>Phonebook</h1>\n        <AddContactForm />\n      </Section>\n          \n      <Section>\n        <h2>Contacts</h2>\n    \n        <Filter />\n       \n            {/* {isLoading && <p>Loading...</p>} */}\n            {isLoading && \n              <Spinner type=\"TailSpin\" color=\"#00BFFF\" height={40} width={40} className=\"Spinner\" timeout={3000} />\n            }\n        <ContactList />\n      </Section>\n    </>        \n  );\n};\n\nconst Section = styled.section`\n  &:not(:last-of-type) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport default App;","import { combineReducers } from \"redux\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  error: \"\",\r\n  contacts: {\r\n    items: [\r\n        //{ id: null, name: \"\", number: null },\r\n        { id: \"id-1\", name: \"Rosie Simpson\", number: \"+38-044-459-1256\" },\r\n        { id: \"id-2\", name: \"Hermione Kline\", number: \"+38-041-443-8912\" },\r\n        { id: \"id-3\", name: \"Eden Clements\", number: \"+38-048-645-1779\" },\r\n        { id: \"id-4\", name: \"Annie Copeland\", number: \"+38-042-227-9126\" },\r\n    ],\r\n    filter: \"\",\r\n  },\r\n};\r\n\r\nconst isLoading = (state = initialState.isLoading, action) => {\r\n  const { type } = action;\r\n\r\n  switch (type) {\r\n    case \"phonebook/fetchContactRequest\":    //case \"phonebook/fetchContactRequest\":    \r\n    case \"phonebook/addContactRequest\":\r\n    case \"phonebook/deleteContactRequest\":\r\n      return true;\r\n    \r\n    case \"phonebook/fetchContactsSuccess\":\r\n    case \"phonebook/fetchContactsError\":\r\n    case \"phonebook/addContactSuccess\":\r\n    case \"phonebook/addContactError\":\r\n    case \"phonebook/deleteContactSuccess\":\r\n    case \"phonebook/deleteContactError\":\r\n      return false;\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst error = (state = initialState.isLoading, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"phonebook/fetchContactsError\":\r\n    case \"phonebook/addContactError\":\r\n    case \"phonebook/deleteContactError\":\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst items = (state = initialState.contacts.items, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"phonebook/fetchContactsSuccess\":\r\n      return payload;\r\n    case \"phonebook/addContactSuccess\":\r\n      return [...state, payload];\r\n\r\n    case \"phonebook/deleteContactSuccess\":\r\n      return [...state.filter(({ id }) => payload !== id)];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filter = (state = initialState.contacts.filter, action ) => {\r\n  const { payload } = action;\r\n  switch (action.type) {\r\n    case \"phonebook/ChangeFilter\":\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({ items, filter, isLoading, error });\r\n\r\n\r\n\r\n\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";  // Імпорт функції створення сховиища \r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } from \"redux-persist\";                                      // Імпорт функції створення persist\r\n//import rootReducer from \"./rootReducer\";\r\nimport logger from \"redux-logger\";\r\nimport contacts from './phonebook/phonebook-reducer';\r\n\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  //reducer: rootReducer,\r\n  reducer: {\r\n    phonebook: contacts\r\n  },\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n import { Provider as AlertProvider } from \"react-alert\";\n import AlertTemplate from \"react-alert-template-basic\";\nimport './styles.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <AlertProvider template={AlertTemplate}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </AlertProvider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}