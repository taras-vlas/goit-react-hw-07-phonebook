{"version":3,"sources":["redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-operations.js","redux/phonebook/phonebook-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","App.jsx","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/Contact-ListItem.module.css"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","getAllContacts","dispatch","a","actions","get","then","data","catch","error","addContact","name","number","getState","phonebook","contacts","find","contact","alert","post","deleteContact","contactId","delete","getFilter","state","filter","createSelector","toLowerCaseFilter","toLowerCase","includes","_","id","loading","INITIAL_STATE","AddContactForm","resetForm","setState","handleChange","event","currentTarget","value","prev","handleSubmit","e","preventDefault","props","onCreateContact","String","this","className","styles","Form","onSubmit","Label","Input","type","pattern","title","required","onChange","Button","Component","mapDispatchToProps","phonebookOperations","connect","phonebookSelectors","useStyles","createUseStyles","display","marginBottom","width","fontSize","color","cursor","font","marginTop","borderRadius","border","outline","boxShadow","phonebookActions","classes","ContactListItem","onDelete","List_item","List_button","onClick","ContactList","prevProp","prevState","prevContacts","currentContacts","localStorage","setItem","JSON","stringify","length","List","map","styled","ul","Loader","role","height","style","justifyContent","margin","Section","section","createReducer","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","document","getElementById","module","exports"],"mappings":"mUAoBe,GACbA,qBAlB2BC,YAAa,kCAmBxCC,qBAlB2BD,YAAa,kCAmBxCE,mBAlB2BF,YAAa,gCAoBxCG,kBAlBwBH,YAAa,+BAmBrCI,kBAlBwBJ,YAAa,+BAmBrCK,gBAlBwBL,YAAa,6BAoBrCM,qBAlB2BN,YAAa,kCAmBxCO,qBAlB2BP,YAAa,kCAmBxCQ,mBAlB2BR,YAAa,gCAoBxCS,aAlBmBT,YAAa,2BCElCU,IAAMC,SAASC,QAAU,wBAGzB,I,IA6Ce,GACbC,eA9CqB,yDAAM,WAAMC,GAAN,SAAAC,EAAA,sDAC3BD,EAASE,EAAQjB,wBAQjBW,IACGO,IAAI,aACJC,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcL,EAASE,EAAQf,qBAAqBkB,OACzDC,OAAM,SAACC,GAAD,OAAWP,EAASE,EAAQd,mBAAmBmB,OAZ7B,2CAAN,uDA+CrBC,WA/BiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAAsB,SAACV,EAAYW,GAGpD,GADwBA,IAAWC,UAAUC,SACzBC,MAAK,SAAAC,GAAO,OAAIA,EAAQN,OAASA,KAEnD,OADAO,MAAM,GAAD,OAAIP,EAAJ,4BACE,KAITT,EAASE,EAAQb,qBAEjBO,IAEGqB,KAAK,YAAa,CAAER,OAAMC,WAC1BN,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcL,EAASE,EAAQZ,kBAAkBe,OACtDC,OAAM,SAAAC,GAAK,OAAIP,EAASE,EAAQX,gBAAgBgB,SAiBnDW,cAboB,SAAAC,GAAS,8CAAI,WAAMnB,GAAN,SAAAC,EAAA,sDACjCD,EAASE,EAAQV,wBAEjBI,IACGwB,OADH,oBACuBD,IACpBf,MAAK,kBAAMJ,EAASE,EAAQT,qBAAqB0B,OACjDb,OAAM,SAAAC,GAAK,OAAIP,EAASE,EAAQR,mBAAmBa,OANrB,2CAAJ,wD,QCnDzBc,EAAY,SAACC,GAAD,OAAWA,EAAMV,UAAUW,QAEvCxB,EAAiB,SAACuB,GAAD,OAAWA,EAAMV,UAAUC,UAqBnC,GAlBYW,YACzB,CAACzB,EAAgBsB,IACjB,SAACR,EAAUU,GACP,IAAME,EAAoBF,EAAOG,cAEnC,OAAOb,EAASU,QAAO,SAAAR,GAAO,OAAIA,EAAQN,KAAKiB,cAAcC,SAASF,SAOrDD,YACnB,CAAC,SAACI,EAAGT,GAAJ,OAAkBA,GAAWpB,IAC9B,SAACoB,EAAWN,GAAZ,OAAyBA,EAASC,MAAK,SAAAC,GAAO,OAAIA,EAAQc,KAAOV,QAKjEpB,GADa,EAzBI,SAACuB,GAAD,OAAWA,EAAMV,UAAUkB,SAyB/B,EAIbT,E,OCpBIU,EAAgB,CACpBtB,KAAM,GACNC,OAAQ,IAKJsB,E,4MACJV,MAAQS,E,EAGRE,UAAY,WACV,EAAKC,SAAS,CACZH,mB,EA8BJI,aAAe,SAAAC,GACb,MAAwBA,EAAMC,cAAtB5B,EAAR,EAAQA,KAAM6B,EAAd,EAAcA,MAEZ,EAAKJ,UAAS,SAAAK,GAAI,kCACfA,GADe,kBAEjB9B,EAAO6B,Q,EAWZE,aAAe,SAAAC,GACbA,EAAEC,iBACF,MAAyB,EAAKpB,MAAtBb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEd,OAAID,GAAQC,GACV,EAAKiC,MAAMC,gBAAgB,EAAKtB,MAAMb,KAAMoC,OAAO,EAAKvB,MAAMZ,SACvD,EAAKwB,SAAS,CAAEzB,KAAM,GAAIC,OAAQ,MAGpC,M,4CAIT,WACE,MAAyBoC,KAAKxB,MAAtBb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEd,OACE,uBAAMqC,UAAWC,IAAOC,KAAMC,SAAUJ,KAAKN,aAA7C,UAEI,wBAAOO,UAAWC,IAAOG,MAAzB,iBAEE,uBACIJ,UAAWC,IAAOI,MAClBC,KAAK,OACL5C,KAAK,OACL6C,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRlB,MAAO7B,EACPgD,SAAUX,KAAKX,kBAIrB,wBAAOY,UAAWC,IAAOG,MAAzB,mBAEE,uBACIJ,UAAWC,IAAOI,MAClBC,KAAK,MACL5C,KAAK,SACL6C,QAAQ,+FACRC,MAAM,mlBACNC,UAAQ,EACRlB,MAAO5B,EACP+C,SAAUX,KAAKX,kBAInB,wBAAQY,UAAWC,IAAOU,OAAQL,KAAK,SAAvC,gC,GAnGiBM,aAkHnBC,EAAqB,CACzBhB,gBAAiBiB,EAAoBrD,YAa5BsD,eApBS,SAAAxC,GAAK,MAAK,CAChCsB,gBAAiBmB,EAAkCzC,MAqBnDsC,EAFaE,CAEO9B,G,QC5IZgC,EAAYC,YAAgB,CAC9Bd,MAAM,CACFe,QAAS,eACTC,aAAc,GACdC,MAAO,IACPC,SAAU,GACVC,MAAO,UACPC,OAAQ,WAGZnB,MAAO,CACHkB,MAAO,UACPE,KAAM,UACNH,SAAU,SACVI,UAAW,EACXC,aAAc,EACdC,OAAQ,oBACRP,MAAO,IACPQ,QAAS,EACT,UAAW,CACPD,OAAQ,iBACRE,UAAW,+CAgCrBjB,EAAqB,CACzBH,SAAUqB,EAAiBnF,cAKdmE,eAXS,SAAAxC,GAAK,MAAK,CAChCgB,MAAOyB,EAA6BzC,MAUEsC,EAAzBE,EAhCA,SAAC,GAAyB,IAAvBxB,EAAsB,EAAtBA,MAAOmB,EAAe,EAAfA,SACjBsB,EAAUf,IAEf,OACG,sBAAKjB,UAAagC,EAAQ5B,MAA1B,kCAEE,uBAAOJ,UAAWgC,EAAQ3B,MACxBC,KAAK,OACL5C,KAAK,SACL6B,MAAOA,EAEPmB,SAAUA,EACRH,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,U,iBCxBJwB,EArBQ,SAAC,GAAgC,IAA9BvE,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQuE,EAAe,EAAfA,SACvC,OACE,qBAAIlC,UAAYC,IAAOkC,UAAvB,UACG,UAAOzE,EAAO,OAASC,EACxB,wBAAQqC,UAAWC,IAAOmC,YAClB9B,KAAK,SACL5C,KAAK,SACL2E,QAASH,EAHjB,wBCIAI,E,wKAGJ,SAAmBC,EAAUC,GAC3B,IAAMC,EAAeF,EAASzE,SACxB4E,EAAkB3C,KAAKH,MAAM9B,SAE/B2E,IAAiBC,GACnBC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,M,oBAIpD,WACE,MAA+B3C,KAAKH,MAA5B9B,EAAR,EAAQA,SAAUoE,EAAlB,EAAkBA,SAElB,OAAIpE,EAASiF,OAAS,EACb,KAIP,cAACC,EAAD,UACGlF,EAASmF,KAAI,YAA2B,IAAxBnE,EAAuB,EAAvBA,GAAIpB,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACzB,OACE,cAAC,EAAD,CAEED,KAAMA,EACNC,OAAQA,EACRuE,SAAU,kBAAMA,EAASpD,KAHpBA,Y,GAxBO8B,aAoCpBoC,EAAOE,IAAOC,GAAV,6CAwBKpC,eAnBS,SAAAxC,GACtB,MAA6BA,EAAMV,UAA3BC,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,OAGlB,MAAO,CACLV,SAHsBA,EAASU,QAAO,SAAAR,GAAO,OAAIA,EAAQN,KAAKiB,cAAcC,SAASJ,EAAOG,sBAarE,SAAA1B,GAAQ,MAAK,CACtCiF,SAAU,SAAApD,GAAE,OAAI7B,EAAS6D,EAAoB3C,cAAcW,QAG9CiC,CAA6CuB,G,iBCrE7C,SAASc,IACtB,OACE,cAAC,IAAD,CACEC,KAAK,QACL/C,KAAK,UACLiB,MAAM,UACNF,MAAO,GACPiC,OAAQ,GACRC,MAAO,CACLpC,QAAS,OACTqC,eAAgB,SAChBC,OAAQ,SCFhB,I,IA+BMC,EAAUR,IAAOS,QAAV,mFAME5C,gBAfiB,SAAAxC,GAEtB,MAAO,CACLT,SAAUkD,EAAkCzC,GAC5CQ,QAASiC,EAA8BzC,MAWpCwC,EArCH,SAAC,GAA2B,IAAzBjD,EAAwB,EAAxBA,SAAUiB,EAAc,EAAdA,QAEvB,OACI,qCACE,eAAC2E,EAAD,WACE,2CACA,cAAC,EAAD,OAGE3E,GAAW,cAACqE,EAAD,IAEf,eAACM,EAAD,WACE,0CACG5F,EAASiF,OAAS,GAAK,cAAC,EAAD,IAE1B,cAAC,EAAD,a,8CCCJjF,GAAW8F,YAAc,IAAD,mBAE3BzG,EAAQf,sBAAuB,SAACyC,EAAD,YAAMgF,WAFV,cAO3B1G,EAAQZ,mBAAoB,SAACgC,EAAD,OAAUsF,EAAV,EAAUA,QAAV,6BAA4BtF,GAA5B,CAAmCsF,OAPpC,cAY3B1G,EAAQT,sBAAuB,SAAC6B,EAAD,OAAUsF,EAAV,EAAUA,QAAV,OAAwBtF,EAAMC,QAAO,qBAAGM,KAAgB+E,QAZ5D,IAgBxBrF,GAASoF,YAAc,GAAD,eAKzBzG,EAAQP,cAAe,SAACiC,EAAD,YAAMgF,YAI1B9E,GAAU6E,aAAc,GAAD,mBAC1BzG,EAAQjB,sBAAuB,kBAAM,KADX,cAE1BiB,EAAQf,sBAAuB,kBAAM,KAFX,cAG1Be,EAAQd,oBAAqB,kBAAM,KAHT,cAK1Bc,EAAQb,mBAAoB,kBAAM,KALR,cAM1Ba,EAAQZ,mBAAoB,kBAAM,KANR,cAO1BY,EAAQX,iBAAkB,kBAAM,KAPN,cAS1BW,EAAQV,sBAAuB,kBAAM,KATX,cAU1BU,EAAQT,sBAAuB,kBAAM,KAVX,cAW1BS,EAAQR,oBAAqB,kBAAM,KAXT,IAedmH,gBAAgB,CAC7BhG,YACAU,UACAO,aC1DIgF,GAAU,uBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdC,OAaaC,GAVDC,YAAe,CAE3BC,QAAS,CACP/G,UAAWC,IAEbiG,WAAYA,GACZc,UAAUC,ICpBZC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,GAAD,MAGAO,SAASC,eAAe,U,mBCZ5BC,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,8B,mBCAlID,EAAOC,QAAU,CAAC,UAAY,oCAAoC,YAAc,wC","file":"static/js/main.09c50797.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\n// Create Action для отримання списку контактів\r\nconst fetchContactsRequest = createAction('phonebook/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('phonebook/fetchContactsSuccess');\r\nconst fetchContactsError =   createAction('phonebook/fetchContactsError');\r\n// Create Action для додавання контактів\r\nconst addContactRequest = createAction('phonebook/addContactRequest');\r\nconst addContactSuccess = createAction('phonebook/addContactSuccess');\r\nconst addContactError =   createAction('phonebook/addContactError');\r\n// Create Action для видалення контактів\r\nconst deleteContactRequest = createAction('phonebook/deleteContactRequest',);\r\nconst deleteContactSuccess = createAction('phonebook/deleteContactSuccess',);\r\nconst deleteContactError =   createAction('phonebook/deleteContactError',);\r\n// Create Action для фільтра\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n//export const changeFilter = createAction('phonebook/changeFilter');\r\n\r\n\r\n          // eslint-disable-next-line\r\nexport default {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  \r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  \r\n  changeFilter\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// import phonebookActionsTypes from './phonebook-actions-types';\r\n// import { v4 as uuidv4 } from 'uuid';         //версія 4 (\"на случайных данных\")\r\n// import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\n// const addContact = createAction(phonebookActionsTypes.ADD, (name, number) => {\r\n//   return {\r\n//     type: phonebookActionsTypes.ADD,\r\n//     payload: { contact: {\r\n//                   id: uuidv4(),\r\n//                   name,\r\n//                   number\r\n//                 }\r\n//     }\r\n//   }\r\n// });\r\n\r\n// const deleteContact = createAction( phonebookActionsTypes.DELETE );\r\n\r\n// const changeFilter = createAction( phonebookActionsTypes.FILTER );\r\n  \r\n// export default { addContact, deleteContact, changeFilter };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const addContact = ({name, number}) => ({ \r\n//   type: phonebookActionsTypes.ADD,\r\n//   payload: { contact: { id: uuidv4(), name, number }},\r\n// });\r\n// const deleteContact = (id) => ({\r\n//   type: phonebookActionsTypes.DELETE,\r\n//   payload: { id },\r\n// }); \r\n// const changeFilter = (filter) => ({\r\n//   type: phonebookActionsTypes.FILTER,\r\n//   payload: { filter },\r\n// });","import axios from 'axios';\r\n// import {\r\n//   fetchContactsRequest,\r\n//   fetchContactsSuccess,\r\n//   fetchContactsError,\r\n\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n  \r\n//   deleteContactRequest,\r\n//   deleteContactSuccess,\r\n//   deleteContactError,\r\n//   } from './phonebook-actions';\r\nimport actions from './phonebook-actions';\r\n  \r\n//axios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/v1';\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n// Отримання списка контактів (Асинхр.операц.)\r\nconst getAllContacts = () => async dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n    // try {\r\n    //   const { data } = await axios.get('/contacts');\r\n    //   dispatch(actions.fetchContactsSuccess(data));\r\n    // } catch (error) {\r\n    //   dispatch(actions.fetchContactsError(error));\r\n    // }\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\n// Додавання контактів :\r\nconst addContact = ({ name, number }) => (dispatch,   getState)  => {\r\n  // Перевірка наявності контактів в Contacts\r\n  const currentContacts = getState().phonebook.contacts;\r\n  if (currentContacts.find(contact => contact.name === name)) {\r\n    alert(`${name} is already in contacts`);\r\n    return null;\r\n  }\r\n  \r\n  // Додавання контактів (Асинхр.операц.)\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    //.post('/contacts', contact)\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\n// Видалення контактів (Асинхр.операц.)\r\nconst deleteContact = contactId => async dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\n          // eslint-disable-next-line\r\nexport default {\r\n  getAllContacts,\r\n  addContact,\r\n  deleteContact\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import axios from \"axios\";\r\n\r\n// import contactsActions from \"./contactsActions\";\r\n\r\n// axios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\n\r\n// const addContact = (name, number) => (dispatch) => {\r\n//   dispatch(contactsActions.addContactRequest());\r\n\r\n//   axios\r\n//     .post(\"/contacts\", { name, number })\r\n//     .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n//     .catch((error) => dispatch(contactsActions.addContactError(error)));\r\n// };\r\n\r\n\r\n// const fetchContacts = () => (dispatch) => {\r\n//   dispatch(contactsActions.fetchContactsRequest());\r\n\r\n//   axios\r\n//     .get(\"/contacts\")\r\n//     .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n//     .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\r\n// };\r\n\r\n\r\n// const deleteContact = (id) => (dispatch) => {\r\n//   dispatch(contactsActions.deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`/contacts/${id}`)\r\n//     .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\r\n//     .catch((error) => dispatch(contactsActions.deleteContactError(error)));\r\n// };\r\n\r\n// export default { addContact, fetchContacts, deleteContact, };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // const fetchData = () => {\r\n// //   return axios.get(`/`).then((res) => {\r\n// //     console.log(res);\r\n// //     return res;\r\n// //   });\r\n// // };\r\n\r\n// const postContact = ({ name, number }) => {\r\n//   return axios.post(`/contacts`, { name, number }).then(({ data }) => {\r\n//     return data;\r\n//   });\r\n// };\r\n\r\n// const fetchContacts = () => {\r\n//   return axios.get(`/contacts`).then(({ data }) => {\r\n//     return data;\r\n//   });\r\n// };\r\n\r\n// const deleteContact = ({ id }) => {\r\n//   return axios.delete(`/contacts/${id}`).then(() => {\r\n//     return id;\r\n//   });\r\n// };\r\n\r\n// export default {\r\n//   fetchContacts,\r\n//   postContact,\r\n//   deleteContact,\r\n//   // fetchData,\r\n// };","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getLoading = (state) => state.phonebook.loading;\r\nconst getError = (state) => state.phonebook.error;\r\nconst getFilter = (state) => state.phonebook.filter;\r\n\r\nconst getAllContacts = (state) => state.phonebook.contacts;\r\n\r\n// Мемоізація функції фільтра контактів\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n      const toLowerCaseFilter = filter.toLowerCase();\r\n    \r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(toLowerCaseFilter) );\r\n    //return contacts.filter(({ name }) =>      name.toLowerCase().includes(toLowerCaseFilter) );\r\n  }\r\n);\r\n\r\n          // const getContactId = (contactID) => (state) =>\r\n          //   state.phonebook.contacts.find((contact) => contact.id === contactID);\r\nconst getContactId = createSelector(\r\n  [(_, contactId) => contactId, getAllContacts],\r\n  (contactId, contacts) => contacts.find(contact => contact.id === contactId)\r\n);\r\n\r\n          // eslint-disable-next-line\r\nexport default {\r\n  getAllContacts,\r\n  getLoading,\r\n    getError,\r\n  getFilter,\r\n\r\n  getVisibleContacts,\r\n  getContactId\r\n};\r\n","import React, { Component } from 'react';\r\n//import { useState } from 'react';\r\n//import { v4 as uuidv4 } from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./ContactForm.module.css\";\r\n//import phonebookActions from '../../redux/phonebook/phonebook-actions';\r\nimport phonebookOperations from '../../redux/phonebook/phonebook-operations';\r\nimport phonebookSelectors from '../../redux/phonebook/phonebook-selectors';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\n             //const [state, setState] = useState(INITIAL_STATE);\r\n\r\n// компонента ContactForm\r\nclass AddContactForm extends Component {\r\n  state = INITIAL_STATE;\r\n\r\n// Очистка поля форми     resetForm = () => {\r\n  resetForm = () => {\r\n    this.setState({\r\n      INITIAL_STATE\r\n      // name: '',\r\n      // number: '',\r\n    });\r\n  };\r\n  \r\n  //       handleSubmit = (event) => {\r\n  //         event.preventDefault();\r\n          \r\n  //           // if (name && number) {\r\n  //           // this.props.onCreateContact(\r\n  //           //   this.state.name,\r\n  //           //   this.state.number\r\n  //           // );\r\n  //           this.props.onCreateContact({\r\n  //             name: this.state.name,\r\n  //             number: this.state.number,\r\n  //           });\r\n  //           ////   return this.setState({ name: '', number: '' });  // alert (...) is already in contacts`);\r\n  //           //// }\r\n  //           //  if (this.props.onCreateContact.some(element => element.name === this.state.name))\r\n        \r\n  //           //   return alert.show(`${this.state.name} is already in your contacts`);\r\n  //           //     this.props.onSubmit(this.state);\r\n\r\n  //           this.resetForm();\r\n  //       };\r\n \r\n\r\n  // Iнпут...\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n \r\n      this.setState(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n  // handleChange = ({ target }) => {\r\n  //   const { name, value } = target;\r\n\r\n  //   this.setState({\r\n  //     [name]: value,\r\n  //   })\r\n  // };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    if (name && number) {\r\n      this.props.onCreateContact(this.state.name, String(this.state.number));\r\n      return this.setState({ name: '', number: '' });\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    \r\n    return (\r\n      <form className={styles.Form} onSubmit={this.handleSubmit}>\r\n        \r\n          <label className={styles.Label}>\r\n            Name\r\n            <input\r\n                className={styles.Input}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                value={name}  // // {this.state.name} -  значення передає в локальний стейт\r\n                onChange={this.handleChange}\r\n            />\r\n          </label>\r\n        \r\n          <label className={styles.Label}>\r\n            Number\r\n            <input\r\n                className={styles.Input}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                required\r\n                value={number}      // {this.state.number}\r\n                onChange={this.handleChange}\r\n            />\r\n          </label>\r\n        \r\n            <button className={styles.Button} type=\"submit\">\r\n              Add contact\r\n            </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\n// Аргумент mapStateToProps функції connect для надання даних сховища у пропи компонентв   з глобального стейта\r\nconst mapStateToProps = state => ({\r\n  onCreateContact: phonebookSelectors.getAllContacts(state),\r\n  // contacts: phonebookSelectors.getAllContacts(state),\r\n});\r\n\r\n// Аргумент mapDispatchToProps может быть либо объектом, либо функцией, которая возвращает либо обычный объект, либо другую функцию\r\n    const mapDispatchToProps = {\r\n      onCreateContact: phonebookOperations.addContact,\r\n    };\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: text => dispatch(phonebookOperations.addContact(text)),\r\n// });\r\n\r\n\r\nAddContactForm.propTypes = {\r\n  onCreateContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps)(AddContactForm);\r\n\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport phonebookActions from '../../redux/phonebook/phonebook-actions';\r\n//import phonebookOperations from '../../redux/phonebook/phonebook-operations';\r\nimport phonebookSelectors from '../../redux/phonebook/phonebook-selectors';\r\n\r\n    import { createUseStyles } from 'react-jss';\r\n\r\n    const useStyles = createUseStyles({\r\n        Label:{\r\n            display: 'inline-block',\r\n            marginBottom: 16,\r\n            width: 200,\r\n            fontSize: 16,\r\n            color: '#171718',\r\n            cursor: 'pointer',\r\n            }, \r\n         \r\n        Input: {\r\n            color: '#171718',\r\n            font: 'inherit',\r\n            fontSize: '0.9rem',\r\n            marginTop: 6,\r\n            borderRadius: 4,\r\n            border: '1px solid #9e9d9d',\r\n            width: 200,\r\n            outline: 0,\r\n            '&:focus': {\r\n                border: '2px solid blue',\r\n                boxShadow: '1px 1px 3px 1px rgba(41, 107, 250, 0.14)',\r\n                },\r\n            }\r\n        });\r\n\r\n// Приймає значення з поля фільтра \r\nconst Filter = ({ value, onChange }) => {\r\n  const classes = useStyles();\r\n\r\n   return (\r\n      <div className = {classes.Label}>\r\n        Find contacts by name\r\n        <input className={classes.Input}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={value}\r\n          //onChange={e => onChange(e.currentTarget.value)} />\r\n          onChange={onChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n        />\r\n      </div>\r\n    )\r\n}\r\n\r\n// Аргумент mapStateToProps функциії connect для предоставления данных хранилища вашему компоненту\r\nconst mapStateToProps = state => ({\r\n  value: phonebookSelectors.getFilter(state),\r\n});\r\n\r\n// Аргумент mapDispatchToProps может быть либо объектом, либо функцией, которая возвращает либо обычный объект, либо другую функцию\r\nconst mapDispatchToProps = {\r\n  onChange: phonebookActions.changeFilter,\r\n  // onChange: e => (phonebookActions.changeFilter(e.currentTarget.value))\r\n \r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onchange: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./Contact-ListItem.module.css\";\r\n\r\nconst ContactListItem = ({ name, number, onDelete }) => {\r\n  return (\r\n    <li className= {styles.List_item}>\r\n      {\"• \" + name + \":   \" + number}\r\n      <button className={styles.List_button}\r\n              type=\"button\"\r\n              name=\"delete\"\r\n              onClick={onDelete}\r\n      >\r\n          Delete\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired\r\n};\r\n\r\nexport default  ContactListItem;\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport ContactListItem from './ContactListItem';\r\n//import phonebookActions from '../../redux/phonebook/phonebook-actions';\r\nimport phonebookOperations from '../../redux/phonebook/phonebook-operations';\r\n//import phonebookSelectors from '../../redux/phonebook/phonebook-selectors';\r\n\r\n\r\n// компонента ContactList\r\nclass ContactList extends Component {\r\n//const ContactsList = ({ contacts, onDelete }) => (\r\n  \r\n  componentDidUpdate(prevProp, prevState) {\r\n    const prevContacts = prevProp.contacts;\r\n    const currentContacts = this.props.contacts;\r\n\r\n    if (prevContacts !== currentContacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(currentContacts));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { contacts, onDelete } = this.props;\r\n\r\n    if (contacts.length < 1) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <List>\r\n        {contacts.map(({ id, name, number }) => {\r\n          return (\r\n            <ContactListItem\r\n              key={id}\r\n              name={name}\r\n              number={number}\r\n              onDelete={() => onDelete(id)}\r\n            />\r\n          );\r\n        })}\r\n      </List>\r\n    )\r\n  }\r\n}\r\n\r\nconst List = styled.ul`\r\n  width: 500px;\r\n`;\r\n\r\n// Аргумент mapStateToProps функции connect для предоставления данных хранилища вашему компоненту\r\nconst mapStateToProps = state => {\r\n  const { contacts, filter } = state.phonebook;\r\n  const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\r\n\r\n  return {\r\n    contacts: visibleContacts,\r\n    //contacts: phonebookSelectors.visibleContacts,\r\n  };\r\n};\r\n\r\n\r\n// Аргумент mapDispatchToProps может быть либо объектом, либо функцией, которая возвращает либо обычный объект, либо другую функцию\r\n    // const mapDispatchToProps = {\r\n    //   onDelete: phonebookOperations.deleteContact,\r\n    // };\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDelete: id => dispatch(phonebookOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n//export default connect( null, mapDispatchToProps)(ContactList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// //class ContactList extends Component {\r\n// const ContactList = ({ contacts, onDelete }) => {\r\n  \r\n//   // componentDidUpdate(prevProp, prevState) {\r\n//   //   const prevContacts = prevProp.contacts;\r\n//   //   const currentContacts = this.props.contacts;\r\n\r\n//   //   if (prevContacts !== currentContacts) {\r\n//   //     localStorage.setItem('contacts', JSON.stringify(currentContacts));\r\n//   //   }\r\n//   // };\r\n\r\n//   //render() \r\n//     // const { contacts, onDelete } = this.props;\r\n\r\n//     // if (contacts.length < 1) {\r\n//     //   return null;\r\n//     // }\r\n\r\n//     return (\r\n//       <List>\r\n//         {contacts.map(({ id, name, number }) => {\r\n//           return (\r\n//             <ContactListItem\r\n//               key={id}\r\n//               name={name}\r\n//               number={number}\r\n//               onDelete={() => onDelete(id)}\r\n//             />\r\n//           );\r\n//         })}\r\n//       </List>\r\n//     )\r\n//   // }\r\n// }\r\n\r\n// const List = styled.ul`\r\n//   width: 500px;\r\n// `;\r\n\r\n// // Аргумент mapStateToProps функции connect для предоставления данных хранилища вашему компоненту\r\n//     // const mapStateToProps = state => {\r\n//     //   const { contacts, filter } = state.phonebook;\r\n//     //   const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\r\n\r\n//     //   return {\r\n//     //     contacts: visibleContacts,\r\n//     //     //contacts: phonebookSelectors.visibleContacts,\r\n//     //   };\r\n//     // };\r\n// // const mapStateToProps = state => ({\r\n// //   contacts: phonebookSelectors.getVisibleContacts(state),\r\n// // });\r\n\r\n\r\n\r\n\r\n\r\n\r\n","//  Spinner\nimport Spinner from 'react-loader-spinner';\n\nexport default function Loader() {\n  return (\n    <Spinner\n      role=\"alert\"          \n      type=\"Circles\"\n      color=\"#00BFFF\"\n      width={40}\n      height={40}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '5px',\n      }}\n    />\n  );\n}\n","\nimport { connect } from 'react-redux';\nimport styled from 'styled-components'\n\nimport AddContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nimport phonebookSelectors from \"./redux/phonebook/phonebook-selectors\";\n// import { getFilter, getLoading } from \"./redux/phonebook/phonebook-selectors\";\nimport Loader from './components/Loader';\n\nconst App = ({ contacts, loading }) => {\n\n  return (\n      <>\n        <Section>\n          <h1>Phonebook</h1>\n          <AddContactForm />\n        </Section>\n      \n           {loading && <Loader />}\n      \n        <Section>\n          <h2>Contacts</h2>\n            {contacts.length > 1 && <Filter />}\n            {/* <Filter /> */}\n          <ContactList />\n        </Section>\n      </>  \n  )\n}\n\n\n        const mapStateToProps = state => {\n         \n          return {\n            contacts: phonebookSelectors.getAllContacts(state),\n            loading: phonebookSelectors.getLoading(state)\n          };\n        };\n\n\nconst Section = styled.section`\n  &:not(:last-of-type) {\n    margin-bottom: 40px;\n  }`\n;\n\nexport default connect(mapStateToProps)(App);","import { combineReducers } from 'redux';          //Імпорт функц. комбайна редюсерів\r\nimport { createReducer } from '@reduxjs/toolkit'; //Імпорт функц. створення редюсера\r\n// import {\r\n//   fetchContactsRequest,\r\n//   fetchContactsSuccess,\r\n//   fetchContactsError,\r\n\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n  \r\n//   deleteContactRequest,\r\n//   deleteContactSuccess,\r\n//   deleteContactError,\r\n  \r\n//   changeFilter } from './phonebook-actions';\r\nimport actions from './phonebook-actions';\r\n\r\n\r\n// const initialContacts = [\r\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"+38-044-459-1256\" },\r\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"+38-041-443-8912\" },\r\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"+38-048-645-1779\" },\r\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"+38-042-227-9126\" },\r\n// ];\r\n\r\n\r\n// ***** Створення reducers для масива items в контактах (фетч усих контактів, додавання та видалерря контакту)\r\nconst contacts = createReducer([], {\r\n//const contacts = createReducer(initialContacts, {\r\n  [actions.fetchContactsSuccess]: (_, { payload }) => payload,\r\n      //*** functions\r\n  // const addContact = (state, action) => {\r\n  //   return [...state, action.payload]  }\r\n  // [actions.addContactSuccess]: addContact,\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n      //*** functions\r\n  // const deleteContact = (state, action) => {\r\n  //   return state.filter(({ id }) => id !== action.payload);  }\r\n  // [actions.deleteContactSuccess]: deleteContact,\r\n  [actions.deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// ***** Створення reducers для фільтра \r\nconst filter = createReducer('', {\r\n      //*** functions\r\n// const changeFilter = (state, action) => {\r\n//   return action.payload  }\r\n// [actions.changeFilter]: changeFilter,\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n// ***** Створення reducers індикації загрузки\r\nconst loading = createReducer(false, {\r\n  [actions.fetchContactsRequest]: () => true,\r\n  [actions.fetchContactsSuccess]: () => false,\r\n  [actions.fetchContactsError]: () => false,\r\n\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n\r\n  [actions.deleteContactRequest]: () => true,\r\n  [actions.deleteContactSuccess]: () => false,\r\n  [actions.deleteContactError]: () => false\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { combineReducers } from 'redux';\r\n// import { createReducer } from '@reduxjs/toolkit';\r\n// import phonebookActions from './phonebook-actions';\r\n\r\n// const initContacts = [\r\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"+38-044-459-1256\" },\r\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"+38-041-443-8912\" },\r\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"+38-048-645-1779\" },\r\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"+38-042-227-9126\" },\r\n// ];\r\n\r\n\r\n// const addContact = (state, action) => {\r\n//   if (state.find(contact => contact.name === action.payload.contact.name)) {\r\n//     alert(`${action.payload.contact.name} is already in contacts`);\r\n//     return state\r\n//   }\r\n\r\n//   return [...state, action.payload.contact]\r\n// }\r\n\r\n// const deleteContact = (state, action) => {\r\n//   return state.filter(({ id }) => id !== action.payload);\r\n// }\r\n\r\n// const changeFilter = (state, action) => {\r\n//   return action.payload\r\n// }\r\n\r\n//                             /* reducers */\r\n// const contacts = createReducer(initContacts, {  \r\n//   [phonebookActions.addContact]: addContact,\r\n//   [phonebookActions.deleteContact]: deleteContact,\r\n// });\r\n\r\n// const filter = createReducer ('', {\r\n//   [phonebookActions.changeFilter]: changeFilter,\r\n// });\r\n\r\n\r\n// export default combineReducers({ contacts, filter });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { createReducer } from \"@reduxjs/toolkit\";\r\n// import {addContact, deleteContact, changeFilter } from \"./phonebook-actions\";\r\n\r\n\r\n// const contacts = [\r\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"+38-044-459-1256\" },\r\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"+38-041-443-8912\" },\r\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"+38-048-645-1779\" },\r\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"+38-042-227-9126\" },\r\n// ];\r\n\r\n// const contactsReducer = createReducer(contacts, {\r\n//   [addContact]: (state, { payload }) => [...state, payload],\r\n//   [deleteContact]: (state, { payload }) =>\r\n//     state.filter((contact) => contact.id !== payload),\r\n//  //[getContactsFromLS]: (state, { payload }) => payload,\r\n//   [changeFilter]: (state, { payload }) => payload,\r\n// });\r\n\r\n// export default contactsReducer;","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";  // Імпорт функції створення сховиища \r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } from \"redux-persist\";                                      // Імпорт функції створення persist\r\n//import rootReducer from \"./rootReducer\";\r\nimport logger from \"redux-logger\";\r\nimport contacts from './phonebook/phonebook-reducer';\r\n\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  //reducer: rootReducer,\r\n  reducer: {\r\n    phonebook: contacts\r\n  },\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// export const persistor = persistStore(store);\r\nexport default store;\r\n\r\n\r\n\r\n\r\n// import { configureStore } from '@reduxjs/toolkit';\r\n// import phonebookReducer from './phonebook/phonebook-reducer';\r\n\r\n// // const preloadedState = {\r\n// //   phonebook: {\r\n// //     contacts: JSON.parse(localStorage.getItem('contacts')) || []\r\n// //   }\r\n// // }\r\n\r\n// // Створення сховища \r\n// const store = configureStore({\r\n//   reducer: {\r\n//     phonebook: phonebookReducer\r\n//   },\r\n//   //preloadedState\r\n// });\r\n\r\n// export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './styles.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  \n  , document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__3LeAv\",\"Label\":\"ContactForm_Label__3yFXJ\",\"Input\":\"ContactForm_Input__TZ9Se\",\"Button\":\"ContactForm_Button__3nBzd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List_item\":\"Contact-ListItem_List_item__mIXpk\",\"List_button\":\"Contact-ListItem_List_button__jPigt\"};"],"sourceRoot":""}